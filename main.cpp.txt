#include <iostream>
#include <vector>
#include <stdlib.h>
#include <ctime>
using namespace std;

class Song {
    string name;
    string singer;
    int released;
    string genre;
public:
    Song(string n, string s, int r, string g): name(n), singer(s), released(r), genre(g) {
    }

    void playSong() {
        cout << "-------"<<name<<"-------" << endl;
        cout <<singer << endl;
    }

    void display() {
        cout << "name: " << name << " singer: " << singer <<
            "realised: "<<released<< " genre:"<<genre<< endl;
    }

    string getName()const{return name;}
    string getSinger()const{return singer;}
    int getReleased()const{return released;}
    string getGenre()const{return genre;}
};

vector<Song*> songs;
class playlist {
public:
    string name;
    vector<Song*> psongs;
    int playMode;//1.random 2.sequential 3.repeat

    playlist(string n) : name(n), playMode(1) {}

    void add(string name) {
        for (int i = 0; i < songs.size(); i++) {
            if (songs[i]->getName() == name) {
                psongs.push_back(songs[i]);
            }
        }
    }

    void erase(string name) {
        for (int i = 0; i < songs.size(); i++) {
            if (songs[i]->getName() == name) {
                psongs.erase(songs.begin() + i);
            }
        }
    }
    string getname()const{return name; }
    int getSongCount() const { return songs.size(); }

    int getNextSong(int& currentIndex) {
        if (songs.empty()) return 0;
        if (playMode == 1) {
            currentIndex = rand() % songs.size();
        } else if (playMode == 2) {
            ++currentIndex;
        }
        return currentIndex;
    }

    void playPlaylist() {
        int choice = 0;
        int i = 0;
        srand(time(0));
        while (true) {
            //songs[getNextSong(i)]->playSong;
            cout<<"1.change playmode\t2.next\t3.previous\t4.exit";
            cin>>choice;
            if (choice == 1) {
                cout << "choose:\n1.random\n2.sequential\n3.repeat\n";
                cin >> playMode;
            }if (choice == 2) {
                continue;
            }if (choice == 3) {
                if (playMode == 1) {i -= 2;}
                else {--i;}
            }if (choice == 4) {
                break;
            }
        }

    }

    void display() {
        for (auto song: songs) {
            song->display();
        }
    }
};
class Singer {
public:
    string name;
    int albumeCount;
    int songCount;
    vector<Song*> Ssongs;

    Singer() {
        cout << "Singer's name: " << endl;
        cin >> name;
        cout << "Singer's song count: " << endl;
        cin >> songCount;
        cout << "Singer's album count: " << endl;
        cin >> albumeCount;
    }

    void songsfinder() {
        for (int i = 0; i < songs.size(); i++) {
            if (songs[i]->getName() == name) {
                 Ssongs.push_back(songs[i]);
            }
        }
    }

    void editname() {
        cout << "Singer's name: " << endl;
        cin >> name;
    }
    void editalbumcount() {
        cout << "Singer's song count: " << endl;
        cin >> songCount;
    }
    void editsong() {
        cout << "Singer's album count: " << endl;
        cin >> albumeCount;
    }
};
void login(vector<Admin*>admins, vector<Singer*>& singers) {
    while (true) {
        cout << "welcome! choose: " << endl;
        cout << "1.Admin\n2.User";
        int ans;
        cin >> ans;
        if (ans == 1) {
            cout << "your username: ";
            string username;
            cin >> username;
            cout << "your password: ";
            string password;
            cin >> password;
            for (auto a: admins) {
                if (a->username == username) {
                    if (a->password == password) {
                        cout << "choose what you want: " << endl;
                        cout << "1.add song\n2.add and edit playlist\n3.make page for singer" << endl;
                        int choice;
                        cin >> choice;
                        if (choice == 1) {
                            a->addSong();
                        } else if (choice == 2) {
                            cout << "1.add song\n2.add and edit playlist\n3.make page for singer" << endl;
                            cin >> choice;
                            switch (choice) {
                                case 1:
                                    a->addPlaylist();
                                case 2:
                                    a->addSongToPlaylist();
                                case 3:
                                    a->eraseSongfromPlaylist();
                            }
                        } else if (choice == 3) {
                            singers.push_back(new Singer());
                        }
                    }
                }
            }
        } else {

        }
    }
}

class MusicSystem {
public:
    vector<User*> users;
    vector<playlist*> playlists;
    vector<Singer*> singers;
    User* currentUser;
    vector<Admin*> admins;

    MusicSystem(vector<Admin*>&a) : currentUser(nullptr), admins(a) {}
};

vector<Song*> filterSongsByArtist(string artistName) {
    vector<Song*> results;
    for (auto song : songs) {
        if (song->getSinger() == artistName) {
            results.push_back(song);
        }
    }
    return results;
}

vector<Song*> filterSongsByGenre(string genre) {
    vector<Song*> results;
    for (auto song : songs) {
        if (song->getGenre() == genre) {
            results.push_back(song);
        }
    }
    return results;
}

vector<Song*> filterSongsByYear(int year) {
    vector<Song*> results;
    for (auto song : songs) {
        if (song->getReleased() == year) {
            results.push_back(song);
        }
    }
    return results;
}

int main() {
    vector<Admin*> admin;
    MusicSystem music_system(admin);
    admin.emplace_back(new Admin("first", "1"));
    admin.emplace_back(new Admin("second", "2"));
    admin.emplace_back(new Admin("third", "3"));
    login(admin, music_system.singers);

    return 0;
}
